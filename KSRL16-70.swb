dim swApp
dim storePath
dim sw2003api
dim sw2007api
dim docVisible
#If VBA7 Then
Private Type BROWSEINFO
   hwndOwner       As LongPtr
   pIDLRoot        As Long
   pszDisplayName  As String
   lpszTitle       As String
   ulFlags         As Long
   lpfnCallback    As LongPtr
   lParam          As LongPtr
  iImage          As Long
End Type
Private Declare PtrSafe Function SHBrowseForFolder Lib "Shell32" (lpbi As BROWSEINFO) As Long
Private Declare PtrSafe Function SHGetPathFromIDList Lib "Shell32" (ByVal pidList As Long, ByVal lpBuffer As String) As Long
Private Declare PtrSafe Sub CoTaskMemFree Lib "ole32" (ByVal hMem As Long)
#Else
Private Type BROWSEINFO
   hwndOwner       As Long
   pIDLRoot        As Long
   pszDisplayName  As Long
   lpszTitle       As String
   ulFlags         As Long
   lpfnCallback    As Long
   lParam          As Long
  iImage          As Long
End Type
Private Declare Function SHBrowseForFolder Lib "Shell32" (lpbi As BROWSEINFO) As Long
Private Declare Function SHGetPathFromIDList Lib "Shell32" (ByVal pidList As Long, ByVal lpBuffer As String) As Long
Private Declare Sub CoTaskMemFree Lib "ole32" (ByVal hMem As Long)
#End If
Private Const MAX_PATH = 260
'Directories only
Private Const BIF_RETURNONLYFSDIRS = &H1&
'Windows 2000 (Shell32.dll 5.0) extended dialog
Private Const BIF_NEWDIALOGSTYLE = &H40
' show edit box
Private Const BIF_EDITBOX = &H10&
Function getFeatureByTypeOcc(model, typ, nr)  
  Set feat = model.FirstFeature ' Get the 1st feature in part
  Set res = Nothing
  Count = 0
  Do While Not feat Is Nothing ' While we have a valid feature
    If feat.GetTypeName() = typ Then
      Count = Count + 1
      If Count = nr Then
        Set res = feat
        Exit Do
      End If
    End If
    Set feat = feat.GetNextFeature() ' Get the next feature
  Loop ' Continue until no more
  Set getFeatureByTypeOcc = res
End Function
Function getLastFeatureByType(model,typ)  
  Set feat = model.FirstFeature ' Get the 1st feature in part
  Set res = Nothing
  Count = 0
  Do While Not feat Is Nothing ' While we have a valid feature
    If feat.GetTypeName() = typ Then
      Set res = feat
    End If
    Set feat = feat.GetNextFeature() ' Get the next feature
  Loop ' Continue until no more
  Set getLastFeatureByType = res
End Function
' this code with copy a matrix to a other
Function copyMat4x4(source)
Dim res(0 To 15) As Double
For i = 0 To 15
 res(i) = source(i)
Next
copyMat4x4 = res
End Function

' This code creates a mat from a sw mat
Function createMatFromSWMat(source)
 Dim res(0 To 15) As Double
 res(0) = source(0)
 res(1) = source(1)
 res(2) = source(2)
 res(3) = 0
 res(4) = source(3)
 res(5) = source(4)
 res(6) = source(5)
 res(7) = 0
 res(8) = source(6)
 res(9) = source(7)
 res(10) = source(8)
 res(11) = 0
 res(12) = source(9)
 res(13) = source(10)
 res(14) = source(11)
 res(15) = source(12)
 createMatFromSWMat = res
End Function
Function createSWMatFromMat(source)
 Dim res(0 To 15) As Double
 res(0) = source(0)
 res(1) = source(1)
 res(2) = source(2)
 res(3) = source(4)
 res(4) = source(5)
 res(5) = source(6)
 res(6) = source(8)
 res(7) = source(9)
 res(8) = source(10)
 res(9) = source(12)
 res(10) = source(13)
 res(11) = source(14)
 res(12) = source(15)
 res(13) = 0
 res(14) = 0
 res(15) = 0
 createSWMatFromMat = res
End Function
Function createMat4x4FromValues(x1,x2,x3,y1,y2,y3,z1,z2,z3,t1,t2,t3)
 Dim res(0 To 15) As Double
 res(0) = x1
 res(1) = x2
 res(2) = x3
 res(3) = 0
 res(4) = y1
 res(5) = y2
 res(6) = y3
 res(7) = 0
 res(8) = z1
 res(9) = z2
 res(10) =z3
 res(11) = 0
 res(12) = t1
 res(13) = t2
 res(14) = t3
 res(15) = 1
 createMat4x4FromValues = res
End Function
' this code will mult a common mat with any other stuff
Function multMatMat(ld, xld, yld, rd, xrd, yrd)
  mulRes = yld * xrd
  'Dim od(0 To 0) As Variant
  ReDim od(mulRes - 1) As Double
  For i = 0 To mulRes - 1
   od(i) = 0#
  Next
  y = 0
  While y < yld
    x = 0
    While x < xrd
      i = 0
      While i < xld
       od(x * yld + y) = od(x * yld + y) + ld(i * yld + y) * rd(x * yrd + i)
       i = i + 1
      Wend
      x = x + 1
    Wend
    y = y + 1
  Wend
  multMatMat = od

End Function
' this code will mult a vector with a matrix
Function mulMat4x4Values3d(mat, x,y,z)
  tmp = createVec4d(x, y, z, 1)
  res = multMatMat(mat, 4, 4, tmp, 1, 3)
  mulMat4x4Values3d = createVec3d(res(0), res(1), res(2))
End Function
Function mulMat4x4Vec3d(mat, vec)
  tmp = createVec4d(vec(0), vec(1), vec(2), 1)
  res = multMatMat(mat, 4, 4, tmp, 1, 3)
  mulMat4x4Vec3d = createVec3d(res(0), res(1), res(2))
End Function
Function mulMat4x4Mat4x4(mat1, mat2)
  mulMat4x4Mat4x4 = multMatMat(mat1, 4, 4, mat2, 4, 4)
End Function
' create a 4x4 matrix
Function createMat4x4()
 Dim res(0 To 15) As Double
 for i = 0 to 15 
 res(i) = 0
 next
 createMat4x4 = res
End Function
Function createMat4x4Ident()
 Dim res(0 To 15) As Double
 res(0) = 1
 res(5) = 1
 res(10) = 1
 res(15) = 1
 res(1) = 0
 res(2) = 0
 res(3) = 0
 res(4) = 0
 res(6) = 0
 res(7) = 0
 res(8) = 0
 res(9) = 0
 res(11) = 0
 res(12) = 0
 res(13) = 0
 res(14) = 0
 createMat4x4Ident = res
End Function
' this function create a new vector
Function createVec3d(x, y, z)
 Dim res(0 To 2) As Double
 res(0) = x
 res(1) = y
 res(2) = z
 createVec3d = res
End Function
' this function create a new vector
Function createVec4d(x, y, z, w)
 Dim res(0 To 3) As Double
 res(0) = x
 res(1) = y
 res(2) = z
 res(3) = w
 createVec4d = res
End Function

Function getMatTVec(mat)
 getMatTVec = createVec3d(mat(12), mat(13), mat(14))
End Function

Sub setMatTVec(mat, v)
 mat(12) = v(0)
 mat(13) = v(1)
 mat(14) = v(2)
End Sub
Sub setMatXVec(mat, v)
 mat(0) = v(0)
 mat(1) = v(1)
 mat(2) = v(2)
End Sub
Sub setMatYVec(mat, v)
 mat(4) = v(0)
 mat(5) = v(1)
 mat(6) = v(2)
End Sub
Sub setMatZVec(mat, v)
 mat(8) = v(0)
 mat(9) = v(1)
 mat(10) = v(2)
End Sub
Sub setMatScale(mat, s)
 mat(15) = s
End Sub
Function getMatXVec(mat)
 getMatXVec = createVec3d(mat(0), mat(1), mat(2))
End Function
Function getMatYVec(mat)
 getMatYVec = createVec3d(mat(4), mat(5), mat(6))
End Function
Function getMatZVec(mat)
 getMatZVec = createVec3d(mat(8), mat(9), mat(10))
End Function

Function negVec3d(v)
 negVec3d = createVec3d(-v(0), -v(1), -v(2))
End Function
Function scaleVec3d(v,s)
 scaleVec3d = createVec3d(v(0)*s,v(1)*s,v(2)*s)
End Function
' invert a 4x4 matrix
Function invMat4x4(source)
target = copyMat4x4(source)
setMatTVec target, createVec3d(0, 0, 0)
 target(1) = source(4)
 target(4) = source(1)
 target(2) = source(8)
 target(8) = source(2)
 target(6) = source(9)
 target(9) = source(6)
 setMatScale target,1
 t = getMatTVec(source)
 v = mulMat4x4Vec3d(target, t)
 setMatTVec target, negVec3d(v)
 invMat4x4 = target
End Function
Function getFaceFromModel(part, pos, normal)
 Dim partBodies As Variant
 partBodies = part.GetBodies(swSolidBody)
 For k = LBound(partBodies) To UBound(partBodies)
   found = 0
   Dim body As Object
   Set body = partBodies(k)
   Set face = body.GetFirstFace()
   getFaceFromModel = noting
   Do While Not face Is Nothing ' While we have a valid feature
     Set sur = face.GetSurface()
     If sur.IsPlane() Then
       planePara = sur.PlaneParams
       faceNormal = face.normal
       nTest = faceNormal(0) * normal(0) + faceNormal(1) * normal(1) + faceNormal(2) * normal(2)
       If nTest > 1 - 0.000001 Then
         ' check projection
         closeRes = face.GetClosestPointOn(pos(0), pos(1), pos(2))
         dTest = (pos(0) - closeRes(0)) * (pos(0) - closeRes(0)) + (pos(1) - closeRes(1)) * (pos(1) - closeRes(1)) + (pos(2) - closeRes(2)) * (pos(2) - closeRes(2))
         If dTest < 0.000001 Then
           Set getFaceFromModel = face
           found=1
           Exit Do
         End If
       End If
     else
       If sur.IsCylinder() then
         closeRes = face.GetClosestPointOn(pos(0), pos(1), pos(2))
         dTest = (pos(0) - closeRes(0)) * (pos(0) - closeRes(0)) + (pos(1) - closeRes(1)) * (pos(1) - closeRes(1)) + (pos(2) - closeRes(2)) * (pos(2) - closeRes(2))
         If dTest < 0.00000001 Then
           res=sur.EvaluateAtPoint(closeRes(0),closeRes(1),closeRes(2))
           nTest=res(0)*normal(0)+res(1)*normal(1)+res(2)*normal(2)
           if nTest>1-0.00000001 then
             Set getFaceFromModel = face
             found=1
             Exit Do
           End if
         End if
       End if
     End if
     Set face = face.GetNextFace ' Get the next Face
   Loop
   If (found = 1) Then
     Exit For
   End If
 Next k
End Function
Function getEdgeFromModel(part, pos,byref edgeRet)
 Dim partBodies As Variant
 partBodies = part.GetBodies(swSolidBody)
 For k = LBound(partBodies) To UBound(partBodies)
   Dim body As Object
   Set body = partBodies(k)
   edges= body.GetEdges()
   start= LBound(edges)
   ende = UBound(edges)
   For i = start To ende
     Set edge = edges(i)
     closeRes=edge.GetClosestPointOn(pos(0),pos(1),pos(2))
     dTest = (pos(0) - closeRes(0)) * (pos(0) - closeRes(0)) + (pos(1) - closeRes(1)) * (pos(1) - closeRes(1)) + (pos(2) - closeRes(2)) * (pos(2) - closeRes(2))
     If dTest < 0.00000001 Then
       set edgeRet=edge
       getEdgeFromModel=true
       exit function
     End If
   Next i
 Next k
 getEdgeFromModel=false
End Function
sub cLn(part,wMat,x1,y1,x2,y2)
pk1=mulMat4x4Values3d(wMat,x1,y1,0)
pk2=mulMat4x4Values3d(wMat,x2,y2,0)
Part.CreateLine2 pk1(0),pk1(1),0,pk2(0),pk2(1),0
end sub
sub cCLn(part,wMat,x1,y1,x2,y2)
pk1=mulMat4x4Values3d(wMat,x1,y1,0)
pk2=mulMat4x4Values3d(wMat,x2,y2,0)
Part.CreateCenterLineVB pk1(0),pk1(1),0,pk2(0),pk2(1),0
end sub
sub cArc(part,wMat,x1,y1,x2,y2,x3,y3)
pk1=mulMat4x4Values3d(wMat,x1,y1,0)
pk2=mulMat4x4Values3d(wMat,x2,y2,0)
pk3=mulMat4x4Values3d(wMat,x3,y3,0)
Part.Create3PointArc pk1(0),pk1(1),0,pk3(0),pk3(1),0,pk2(0),pk2(1),0
end sub
sub cCir(part,wMat,x1,y1,rad)
pk1=mulMat4x4Values3d(wMat,x1,y1,0)
Part.CreateCircleByRadius2 pk1(0),pk1(1),0,rad
end sub
Public Function BrowseForFolder() As String
  Dim tBI         As BROWSEINFO
  Dim lngPIDL     As Long
  Dim strPath     As String
  With tBI
    .lpszTitle = ""
    .ulFlags = BIF_RETURNONLYFSDIRS Or BIF_NEWDIALOGSTYLE Or BIF_EDITBOX
  End With
  lngPIDL = SHBrowseForFolder(tBI)
  If (lngPIDL <> 0) Then
    ' get path from ID list
    strPath = Space$(MAX_PATH)
    SHGetPathFromIDList lngPIDL, strPath
    strPath = Left$(strPath, InStr(strPath, Chr$(0)) - 1)
    ' release list
    CoTaskMemFree lngPIDL
  End If
  BrowseForFolder = strPath
End Function
Sub CreatePart0
dim error as long
set res=swApp.OpenDoc2 ( storePath & "KSRLR16-70.sldprt",1,true,false,true,error)
if not res is nothing then
 exit sub
end if
set part=swApp.NewPart
part.SetAddToDB(true)
part.SetDisplayWhenAdded (false)
part.AddCustomInfo3 "", "NN", 30, "KSRLR"
part.AddCustomInfo3 "", "NT", 30, "Simplified Slide Rails - Aluminum Bearing Type - Rail"
part.AddCustomInfo3 "", "NB", 30, "KSRLR16-70"
part.AddCustomInfo3 "", "NBSYN", 30, "$PN."
part.AddCustomInfo3 "", "LINA", 30, "KSRLR16-70"
part.AddCustomInfo3 "", "PN", 30, "KSRLR16-70"
part.AddCustomInfo3 "", "MAT", 30, "Aluminum Alloy "
part.AddCustomInfo3 "", "ST", 30, "Hard Alumite Treatment"
part.AddCustomInfo3 "", "NO", 30, "16"
part.AddCustomInfo3 "", "L", 30, "70"
part.AddCustomInfo3 "", "NOMH", 30, "2"
part.AddCustomInfo3 "", "AL", 30, "79(8)"
part.AddCustomInfo3 "", "SUPPLIER", 30, "MISUMI"
part.AddCustomInfo3 "", "ARTICLENO", 30, "KSRLR16-70"
part.AddCustomInfo3 "", "BOMINFO", 30, "KSRLR16-70"
part.AddCustomInfo3 "", "CREATOR", 30, "CADENAS GmbH"
part.AddCustomInfo3 "", "IsFastener", 30, "0"
part.SummaryInfo(0)="KSRLR16-70"
part.SummaryInfo(4)="Simplified Slide Rails - Aluminum Bearing Type - Rail"
part.SummaryInfo(2)="Cadenas PARTsolutions"
valRGB=part.MaterialPropertyValues
valRGB(0)=0.75294119119644
valRGB(1)=0.75294119119644
valRGB(2)=0.75294119119644
part.MaterialPropertyValues=valRGB
Dim featMgr as object
if (sw2003api=1) then
  set featMgr=part.FeatureManager
End If
part.CreatePlaneFixed createVec3d(0,0,0),createVec3d(1,0,0),createVec3d(0,1,0),1
part.BlankRefGeom
set feat4=getLastFeatureByType(part,"RefPlane")
feat4.select false
codeBag0 part
set feat4=getLastFeatureByType(part,"ProfileFeature")
feat4.select false
if (sw2003api=0) then
  part.FeatureExtrusion 0,0,1,0,0,0.035,0.035,1,1,0,0,0,0,0,0
else
  featMgr.FeatureExtrusion 0,0,1,0,0,0.035,0.035,1,1,0,0,0,0,0,0,0,0,1,1,1
end if
part.CreatePlaneFixed createVec3d(0,0,0),createVec3d(0,0,-1),createVec3d(0,1,0),1
part.BlankRefGeom
set feat7=getLastFeatureByType(part,"RefPlane")
feat7.select false
codeBag1 part
set feat7=getLastFeatureByType(part,"ProfileFeature")
feat7.select false
if (sw2003api=0) then
  part.FeatureRevolveCut2 6.2831853071796,1,6.2831853071796,0,0
else
  featMgr.FeatureRevolveCut 6.2831853071796,1,6.2831853071796,0,0,1,1
end if
part.CreatePlaneFixed createVec3d(0,0,-0.04),createVec3d(0,0,-1.04),createVec3d(0,1,-0.04),1
part.BlankRefGeom
set feat10=getLastFeatureByType(part,"RefPlane")
feat10.select false
codeBag2 part
set feat10=getLastFeatureByType(part,"ProfileFeature")
feat10.select false
if (sw2003api=0) then
  part.FeatureRevolveCut2 6.2831853071796,1,6.2831853071796,0,0
else
  featMgr.FeatureRevolveCut 6.2831853071796,1,6.2831853071796,0,0,1,1
end if
part.SetDisplayWhenAdded (true)
part.SetAddToDB(false)
part.EditRebuild3
part.Rebuild swRebuildAll
part.SaveAs2 storePath & "KSRLR16-70.sldprt",0,0,false
End Sub
Sub CreatePart1
dim error as long
set res=swApp.OpenDoc2 ( storePath & "KSRLS16_s_s.sldprt",1,true,false,true,error)
if not res is nothing then
 exit sub
end if
set part=swApp.NewPart
part.SetAddToDB(true)
part.SetDisplayWhenAdded (false)
part.AddCustomInfo3 "", "NN", 30, "KSRLS_a"
part.AddCustomInfo3 "", "NT", 30, "Simplified Slide Rails - Aluminum Bearing Type"
part.AddCustomInfo3 "", "NB", 30, "KSRLS16_s_s"
part.AddCustomInfo3 "", "NBSYN", 30, "$PN._s"
part.AddCustomInfo3 "", "LINA", 30, "KSRLS16_s_s"
part.AddCustomInfo3 "", "PN", 30, "KSRLS16_s"
part.AddCustomInfo3 "", "MAT", 30, "Aluminum Alloy"
part.AddCustomInfo3 "", "ST", 30, "Hard Alumite Treatment"
part.AddCustomInfo3 "", "NO", 30, "16"
part.AddCustomInfo3 "", "AL", 30, "79(8)"
part.AddCustomInfo3 "", "Z", 30, "KSRLS"
part.AddCustomInfo3 "", "SUPPLIER", 30, "MISUMI"
part.AddCustomInfo3 "", "ARTICLENO", 30, "KSRLS16_s_s"
part.AddCustomInfo3 "", "BOMINFO", 30, "KSRLS16_s_s"
part.AddCustomInfo3 "", "CREATOR", 30, "CADENAS GmbH"
part.AddCustomInfo3 "", "IsFastener", 30, "0"
part.SummaryInfo(0)="KSRLS16_s_s"
part.SummaryInfo(4)="Simplified Slide Rails - Aluminum Bearing Type"
part.SummaryInfo(2)="Cadenas PARTsolutions"
valRGB=part.MaterialPropertyValues
valRGB(0)=0.75294119119644
valRGB(1)=0.75294119119644
valRGB(2)=0.75294119119644
part.MaterialPropertyValues=valRGB
Dim featMgr as object
if (sw2003api=1) then
  set featMgr=part.FeatureManager
End If
part.CreatePlaneFixed createVec3d(0,0,0),createVec3d(1,0,0),createVec3d(0,1,0),1
part.BlankRefGeom
set feat4=getLastFeatureByType(part,"RefPlane")
feat4.select false
codeBag3 part
set feat4=getLastFeatureByType(part,"ProfileFeature")
feat4.select false
if (sw2003api=0) then
  part.FeatureExtrusion 0,0,1,0,0,0.023,0.023,1,1,0,0,0,0,0,0
else
  featMgr.FeatureExtrusion 0,0,1,0,0,0.023,0.023,1,1,0,0,0,0,0,0,0,0,1,1,1
end if
part.CreatePlaneFixed createVec3d(0,0,0.019),createVec3d(1,0,0.019),createVec3d(0,1,0.019),1
part.BlankRefGeom
set feat7=getLastFeatureByType(part,"RefPlane")
feat7.select false
codeBag4 part
set feat7=getLastFeatureByType(part,"ProfileFeature")
feat7.select false
if (sw2003api=0) then
  part.FeatureRevolve2 6.2831853071796,1,6.2831853071796,0,0
else
  featMgr.FeatureRevolve 6.2831853071796,1,6.2831853071796,0,0,1,1,1
end if
part.CreatePlaneFixed createVec3d(0,0,-0.019),createVec3d(1,0,-0.019),createVec3d(0,1,-0.019),1
part.BlankRefGeom
set feat10=getLastFeatureByType(part,"RefPlane")
feat10.select false
codeBag5 part
set feat10=getLastFeatureByType(part,"ProfileFeature")
feat10.select false
if (sw2003api=0) then
  part.FeatureRevolve2 6.2831853071796,1,6.2831853071796,0,0
else
  featMgr.FeatureRevolve 6.2831853071796,1,6.2831853071796,0,0,1,1,1
end if
part.CreatePlaneFixed createVec3d(0,0,0),createVec3d(0,0,-1),createVec3d(0,1,0),1
part.BlankRefGeom
set feat15=getLastFeatureByType(part,"RefPlane")
feat15.select false
codeBag6 part
set feat15=getLastFeatureByType(part,"ProfileFeature")
feat15.select false
if (sw2003api=0) then
  part.FeatureRevolveCut2 6.2831853071796,1,6.2831853071796,0,0
else
  featMgr.FeatureRevolveCut 6.2831853071796,1,6.2831853071796,0,0,1,1
end if
part.CreatePlaneFixed createVec3d(0,0,0),createVec3d(0,0,-1),createVec3d(0,1,0),1
part.BlankRefGeom
set feat17=getLastFeatureByType(part,"RefPlane")
feat17.select false
codeBag7 part
set feat17=getLastFeatureByType(part,"ProfileFeature")
feat17.select false
if (sw2003api=0) then
  part.FeatureRevolveCut2 6.2831853071796,1,6.2831853071796,0,0
else
  featMgr.FeatureRevolveCut 6.2831853071796,1,6.2831853071796,0,0,1,1
end if
part.SetDisplayWhenAdded (true)
part.SetAddToDB(false)
part.EditRebuild3
part.Rebuild swRebuildAll
part.SaveAs2 storePath & "KSRLS16_s_s.sldprt",0,0,false
End Sub
Sub CreatePart2
dim error as long
set res=swApp.OpenDoc2 ( storePath & "B673ZZ.sldprt",1,true,false,true,error)
if not res is nothing then
 exit sub
end if
set part=swApp.NewPart
part.SetAddToDB(true)
part.SetDisplayWhenAdded (false)
part.AddCustomInfo3 "", "NN", 30, "B6 _ _ ZZ, B6 _ _ AZZ, SB6 _ _ ZZ, SB6 _ _ AZZ, BR _ _ ZZ, SBR _ _ ZZ"
part.AddCustomInfo3 "", "NT", 30, "Small Ball Bearings - Double Shield Type"
part.AddCustomInfo3 "", "NB", 30, "B673ZZ"
part.AddCustomInfo3 "", "NBSYN", 30, "$PN."
part.AddCustomInfo3 "", "LINA", 30, "B673ZZ"
part.AddCustomInfo3 "", "PN", 30, "B673ZZ"
part.AddCustomInfo3 "", "MAT", 30, "52100 Bearing Steel"
part.AddCustomInfo3 "", "BN", 30, "673ZZ"
part.AddCustomInfo3 "", "DD", 30, "3.0"
part.AddCustomInfo3 "", "D", 30, "6"
part.AddCustomInfo3 "", "B", 30, "2.5"
part.AddCustomInfo3 "", "RR", 30, "0.08"
part.AddCustomInfo3 "", "CR", 30, "242"
part.AddCustomInfo3 "", "COR", 30, "94"
part.AddCustomInfo3 "", "DS", 30, "3.60"
part.AddCustomInfo3 "", "DDHH", 30, "5.40"
part.AddCustomInfo3 "", "R", 30, "0.08"
part.AddCustomInfo3 "", "MASS", 30, "0.2"
part.AddCustomInfo3 "", "X", 30, "0"
part.AddCustomInfo3 "", "SUPPLIER", 30, "MISUMI"
part.AddCustomInfo3 "", "ARTICLENO", 30, "B673ZZ"
part.AddCustomInfo3 "", "BOMINFO", 30, "B673ZZ"
part.AddCustomInfo3 "", "CREATOR", 30, "CADENAS GmbH"
part.AddCustomInfo3 "", "IsFastener", 30, "0"
part.SummaryInfo(0)="B673ZZ"
part.SummaryInfo(4)="Small Ball Bearings - Double Shield Type"
part.SummaryInfo(2)="Cadenas PARTsolutions"
valRGB=part.MaterialPropertyValues
valRGB(0)=0
valRGB(1)=0
valRGB(2)=0
part.MaterialPropertyValues=valRGB
Dim featMgr as object
if (sw2003api=1) then
  set featMgr=part.FeatureManager
End If
part.CreatePlaneFixed createVec3d(0,0,0),createVec3d(1,0,0),createVec3d(0,1,0),1
part.BlankRefGeom
set feat4=getLastFeatureByType(part,"RefPlane")
feat4.select false
codeBag8 part
set feat4=getLastFeatureByType(part,"ProfileFeature")
feat4.select false
if (sw2003api=0) then
  part.FeatureRevolve2 6.2831853071796,1,6.2831853071796,0,0
else
  featMgr.FeatureRevolve 6.2831853071796,1,6.2831853071796,0,0,1,1,1
end if
part.SetDisplayWhenAdded (true)
part.SetAddToDB(false)
part.EditRebuild3
part.Rebuild swRebuildAll
part.SaveAs2 storePath & "B673ZZ.sldprt",0,0,false
End Sub
sub CreatePart3
dim error as long
set res=swApp.OpenDoc2 ( storePath & "KSRL16-70.sldasm",2,true,false,true,error)
if not res is nothing then
 exit sub
end if
if (docVisible=0) then
 swApp.DocumentVisible 0, 1
end if
createPart0
createPart1
createPart2
createPart2
createPart2
createPart2
swApp.DocumentVisible 1, 1
set part=swApp.NewAssembly
part.AddCustomInfo3 "", "NN", 30, "KSRL, KSRLC"
part.AddCustomInfo3 "", "NT", 30, "Simplified Slide Rails -Load Rating:79N/pc. , Aluminum, With Ball Bearing-"
part.AddCustomInfo3 "", "NB", 30, "KSRL16-70"
part.AddCustomInfo3 "", "NBSYN", 30, "$PN."
part.AddCustomInfo3 "", "LINA", 30, "KSRL16-70"
part.AddCustomInfo3 "", "PN", 30, "KSRL16-70"
part.AddCustomInfo3 "", "TS", 30, "Set Standard"
part.AddCustomInfo3 "", "MATS", 30, "Aluminum Alloy"
part.AddCustomInfo3 "", "MATR", 30, "Polyacetal"
part.AddCustomInfo3 "", "MATCT", 30, "304 Stainless Steel"
part.AddCustomInfo3 "", "MATCP", 30, "Polyacetal"
part.AddCustomInfo3 "", "STS", 30, "Hard Alumite Treatment"
part.AddCustomInfo3 "", "NO", 30, "16"
part.AddCustomInfo3 "", "L", 30, "70"
part.AddCustomInfo3 "", "NOMH", 30, "2"
part.AddCustomInfo3 "", "AL", 30, "79(8)"
part.AddCustomInfo3 "", "ALT", 30, "N/A"
part.AddCustomInfo3 "", "S", 30, "0"
part.AddCustomInfo3 "", "C", 30, "0"
part.AddCustomInfo3 "", "SUPPLIER", 30, "MISUMI"
part.AddCustomInfo3 "", "ARTICLENO", 30, "KSRL16-70"
part.AddCustomInfo3 "", "BOMINFO", 30, "KSRL16-70"
part.AddCustomInfo3 "", "CREATOR", 30, "CADENAS GmbH"
part.SummaryInfo(0)="KSRL16-70"
part.SummaryInfo(4)="Simplified Slide Rails -Load Rating:79N/pc. , Aluminum, With Ball Bearing-"
part.SummaryInfo(2)="Cadenas PARTsolutions"
set comp=part.AddComponent2 ( storePath &"KSRLR16-70.sldprt",0,0,0)
posMat=createMat4x4FromValues(0,-1,0,0,0,1,-1,0,0,0,0,0)
swPosMat=createSWMatFromMat(posMat)
comp.SetXForm(swPosMat)
set comp=part.AddComponent2 ( storePath &"KSRLS16_s_s.sldprt",0,0,0)
posMat=createMat4x4FromValues(0,-1,0,0,0,1,-1,0,0,-4.2862637970157e-19,-2.6245796196583e-35,0.0035)
swPosMat=createSWMatFromMat(posMat)
comp.SetXForm(swPosMat)
set comp=part.AddComponent2 ( storePath &"B673ZZ.sldprt",0,0,0)
posMat=createMat4x4FromValues(0,-1,0,0,0,1,-1,0,0,-0.019,-0.007,0.00025)
swPosMat=createSWMatFromMat(posMat)
comp.SetXForm(swPosMat)
set comp=part.AddComponent2 ( storePath &"B673ZZ.sldprt",0,0,0)
posMat=createMat4x4FromValues(0,-1,0,0,0,1,-1,0,0,0.019,-0.007,0.00025)
swPosMat=createSWMatFromMat(posMat)
comp.SetXForm(swPosMat)
set comp=part.AddComponent2 ( storePath &"B673ZZ.sldprt",0,0,0)
posMat=createMat4x4FromValues(0,-1,0,0,0,1,-1,0,0,-0.019,0.0095,0.00025)
swPosMat=createSWMatFromMat(posMat)
comp.SetXForm(swPosMat)
set comp=part.AddComponent2 ( storePath &"B673ZZ.sldprt",0,0,0)
posMat=createMat4x4FromValues(0,-1,0,0,0,1,-1,0,0,0.019,0.0095,0.00025)
swPosMat=createSWMatFromMat(posMat)
comp.SetXForm(swPosMat)
swApp.CloseDoc storePath &"KSRLR16-70.sldprt"
swApp.CloseDoc storePath &"KSRLS16_s_s.sldprt"
swApp.CloseDoc storePath &"B673ZZ.sldprt"
swApp.CloseDoc storePath &"B673ZZ.sldprt"
swApp.CloseDoc storePath &"B673ZZ.sldprt"
swApp.CloseDoc storePath &"B673ZZ.sldprt"
part.EditRebuild3
part.Rebuild swRebuildAll
part.SaveAs2 storePath & "KSRL16-70.sldasm",0,0,false
end sub
sub codeBag0(part)
Part.InsertSketch
Set swActiveMat = Part.GetActiveSketch()
swSketchMat= createMatFromSWMat(swActiveMat.ModelToSketchXForm)
mSkMat=createMat4x4FromValues(1,0,0,0,1,0,0,0,1,0,0,0)
wMat=mulMat4x4Mat4x4(swSketchMat,mSkMat)
cLn part,wMat,-0.015,0.00525,-0.015,-0.00525
cArc part,wMat,-0.015,-0.00525,-0.014707106781187,-0.0059571067811865,-0.014,-0.00625
cLn part,wMat,-0.014,-0.00625,0.014,-0.00625
cArc part,wMat,0.014,-0.00625,0.014707106781187,-0.0059571067811865,0.015,-0.00525
cLn part,wMat,0.015,-0.00525,0.015,0.00525
cArc part,wMat,0.015,0.00525,0.014707106781187,0.0059571067811865,0.014,0.00625
cLn part,wMat,0.014,0.00625,0.0066,0.00625
cArc part,wMat,0.0066,0.00625,0.0062464466094067,0.0061035533905933,0.0061,0.00575
cLn part,wMat,0.0061,0.00575,0.0061,0.00345
cArc part,wMat,0.0061,0.00345,0.0061585786437627,0.0033085786437627,0.0063,0.00325
cLn part,wMat,0.0063,0.00325,0.01,0.00325
cArc part,wMat,0.01,0.00325,0.010707106781187,0.0029571067811865,0.011,0.00225
cLn part,wMat,0.011,0.00225,0.011,-0.00225
cArc part,wMat,0.011,-0.00225,0.010707106781187,-0.0029571067811865,0.01,-0.00325
cLn part,wMat,0.01,-0.00325,-0.01,-0.00325
cArc part,wMat,-0.01,-0.00325,-0.010707106781187,-0.0029571067811865,-0.011,-0.00225
cLn part,wMat,-0.011,-0.00225,-0.011,0.00225
cArc part,wMat,-0.011,0.00225,-0.010707106781187,0.0029571067811865,-0.01,0.00325
cLn part,wMat,-0.01,0.00325,-0.0063,0.00325
cArc part,wMat,-0.0063,0.00325,-0.0061585786437627,0.0033085786437627,-0.0061,0.00345
cLn part,wMat,-0.0061,0.00345,-0.0061,0.00575
cArc part,wMat,-0.0061,0.00575,-0.0062464466094067,0.0061035533905933,-0.0066,0.00625
cLn part,wMat,-0.0066,0.00625,-0.014,0.00625
cArc part,wMat,-0.014,0.00625,-0.014707106781187,0.0059571067811865,-0.015,0.00525
if (sw2007api=1) then
Part.SketchManager.InsertSketch True
else
Part.InsertSketch
End If
end sub

sub codeBag1(part)
Part.InsertSketch
Set swActiveMat = Part.GetActiveSketch()
swSketchMat= createMatFromSWMat(swActiveMat.ModelToSketchXForm)
mSkMat=createMat4x4FromValues(0,0,-1,0,1,0,1,0,0,0,0,0)
wMat=mulMat4x4Mat4x4(swSketchMat,mSkMat)
cLn part,wMat,-0.02,-0.00325,-0.017,-0.00325
cLn part,wMat,-0.017,-0.00325,-0.017,-0.00525
cLn part,wMat,-0.017,-0.00525,-0.01825,-0.00525
cLn part,wMat,-0.01825,-0.00525,-0.01825,-0.00625
cLn part,wMat,-0.01825,-0.00625,-0.02,-0.00625
cLn part,wMat,-0.02,-0.00625,-0.02,-0.00325
cCLn part,wMat,-0.02,-0.00625,-0.02,-0.00325
if (sw2007api=1) then
Part.SketchManager.InsertSketch True
else
Part.InsertSketch
End If
end sub

sub codeBag2(part)
Part.InsertSketch
Set swActiveMat = Part.GetActiveSketch()
swSketchMat= createMatFromSWMat(swActiveMat.ModelToSketchXForm)
mSkMat=createMat4x4FromValues(0,0,-1,0,1,0,1,0,0,0,0,-0.04)
wMat=mulMat4x4Mat4x4(swSketchMat,mSkMat)
cLn part,wMat,-0.02,-0.00325,-0.017,-0.00325
cLn part,wMat,-0.017,-0.00325,-0.017,-0.00525
cLn part,wMat,-0.017,-0.00525,-0.01825,-0.00525
cLn part,wMat,-0.01825,-0.00525,-0.01825,-0.00625
cLn part,wMat,-0.01825,-0.00625,-0.02,-0.00625
cLn part,wMat,-0.02,-0.00625,-0.02,-0.00325
cCLn part,wMat,-0.02,-0.00625,-0.02,-0.00325
if (sw2007api=1) then
Part.SketchManager.InsertSketch True
else
Part.InsertSketch
End If
end sub

sub codeBag3(part)
Part.InsertSketch
Set swActiveMat = Part.GetActiveSketch()
swSketchMat= createMatFromSWMat(swActiveMat.ModelToSketchXForm)
mSkMat=createMat4x4FromValues(1,0,0,0,1,0,0,0,1,0,0,0)
wMat=mulMat4x4Mat4x4(swSketchMat,mSkMat)
cLn part,wMat,-0.015,0.00625,-0.015,0.00325
cLn part,wMat,-0.015,0.00325,-0.006,0.00325
cLn part,wMat,-0.006,0.00325,-0.006,-0.006
cLn part,wMat,-0.006,-0.006,0.006,-0.006
cLn part,wMat,0.006,-0.006,0.006,0.00325
cLn part,wMat,0.006,0.00325,0.015,0.00325
cLn part,wMat,0.015,0.00325,0.015,0.00625
cLn part,wMat,0.015,0.00625,-0.015,0.00625
if (sw2007api=1) then
Part.SketchManager.InsertSketch True
else
Part.InsertSketch
End If
end sub

sub codeBag4(part)
Part.InsertSketch
Set swActiveMat = Part.GetActiveSketch()
swSketchMat= createMatFromSWMat(swActiveMat.ModelToSketchXForm)
mSkMat=createMat4x4FromValues(1,0,0,0,1,0,0,0,1,0,0,0.019)
wMat=mulMat4x4Mat4x4(swSketchMat,mSkMat)
cLn part,wMat,0.0105,-0.003125,0.0105,-0.005375
cLn part,wMat,0.0105,-0.005375,0.0095,-0.005375
cLn part,wMat,0.0095,-0.005375,0.0095,-0.004625
cLn part,wMat,0.0095,-0.004625,0.007,-0.004625
cLn part,wMat,0.007,-0.004625,0.007,-0.005625
cLn part,wMat,0.007,-0.005625,0.006,-0.005625
cLn part,wMat,0.006,-0.005625,0.006,-0.004625
cLn part,wMat,0.006,-0.004625,-0.006,-0.004625
cLn part,wMat,-0.006,-0.004625,-0.006,-0.005625
cLn part,wMat,-0.006,-0.005625,-0.007,-0.005625
cLn part,wMat,-0.007,-0.005625,-0.007,-0.004625
cLn part,wMat,-0.007,-0.004625,-0.0095,-0.004625
cLn part,wMat,-0.0095,-0.004625,-0.0095,-0.005375
cLn part,wMat,-0.0095,-0.005375,-0.0105,-0.005375
cLn part,wMat,-0.0105,-0.005375,-0.0105,-0.003125
cLn part,wMat,-0.0105,-0.003125,0.0105,-0.003125
cCLn part,wMat,-0.0105,-0.003125,0.0105,-0.003125
if (sw2007api=1) then
Part.SketchManager.InsertSketch True
else
Part.InsertSketch
End If
end sub

sub codeBag5(part)
Part.InsertSketch
Set swActiveMat = Part.GetActiveSketch()
swSketchMat= createMatFromSWMat(swActiveMat.ModelToSketchXForm)
mSkMat=createMat4x4FromValues(1,0,0,0,1,0,0,0,1,0,0,-0.019)
wMat=mulMat4x4Mat4x4(swSketchMat,mSkMat)
cLn part,wMat,0.0105,-0.003125,0.0105,-0.005375
cLn part,wMat,0.0105,-0.005375,0.0095,-0.005375
cLn part,wMat,0.0095,-0.005375,0.0095,-0.004625
cLn part,wMat,0.0095,-0.004625,0.007,-0.004625
cLn part,wMat,0.007,-0.004625,0.007,-0.005625
cLn part,wMat,0.007,-0.005625,0.006,-0.005625
cLn part,wMat,0.006,-0.005625,0.006,-0.004625
cLn part,wMat,0.006,-0.004625,-0.006,-0.004625
cLn part,wMat,-0.006,-0.004625,-0.006,-0.005625
cLn part,wMat,-0.006,-0.005625,-0.007,-0.005625
cLn part,wMat,-0.007,-0.005625,-0.007,-0.004625
cLn part,wMat,-0.007,-0.004625,-0.0095,-0.004625
cLn part,wMat,-0.0095,-0.004625,-0.0095,-0.005375
cLn part,wMat,-0.0095,-0.005375,-0.0105,-0.005375
cLn part,wMat,-0.0105,-0.005375,-0.0105,-0.003125
cLn part,wMat,-0.0105,-0.003125,0.0105,-0.003125
cCLn part,wMat,-0.0105,-0.003125,0.0105,-0.003125
if (sw2007api=1) then
Part.SketchManager.InsertSketch True
else
Part.InsertSketch
End If
end sub

sub codeBag6(part)
Part.InsertSketch
Set swActiveMat = Part.GetActiveSketch()
swSketchMat= createMatFromSWMat(swActiveMat.ModelToSketchXForm)
mSkMat=createMat4x4FromValues(0,0,-1,0,1,0,1,0,0,0,0,0)
wMat=mulMat4x4Mat4x4(swSketchMat,mSkMat)
cLn part,wMat,-0.014,0.00625,-0.0115,0.00625
cLn part,wMat,-0.0115,0.00625,-0.011933,0.005817
cLn part,wMat,-0.011933,0.005817,-0.011933,-0.005567
cLn part,wMat,-0.011933,-0.005567,-0.0115,-0.006
cLn part,wMat,-0.0115,-0.006,-0.014,-0.006
cLn part,wMat,-0.014,-0.006,-0.014,0.00625
cCLn part,wMat,-0.014,-0.006,-0.014,0.00625
if (sw2007api=1) then
Part.SketchManager.InsertSketch True
else
Part.InsertSketch
End If
end sub

sub codeBag7(part)
Part.InsertSketch
Set swActiveMat = Part.GetActiveSketch()
swSketchMat= createMatFromSWMat(swActiveMat.ModelToSketchXForm)
mSkMat=createMat4x4FromValues(0,0,-1,0,1,0,1,0,0,0,0,0)
wMat=mulMat4x4Mat4x4(swSketchMat,mSkMat)
cLn part,wMat,0.014,0.00625,0.0165,0.00625
cLn part,wMat,0.0165,0.00625,0.016067,0.005817
cLn part,wMat,0.016067,0.005817,0.016067,-0.005567
cLn part,wMat,0.016067,-0.005567,0.0165,-0.006
cLn part,wMat,0.0165,-0.006,0.014,-0.006
cLn part,wMat,0.014,-0.006,0.014,0.00625
cCLn part,wMat,0.014,-0.006,0.014,0.00625
if (sw2007api=1) then
Part.SketchManager.InsertSketch True
else
Part.InsertSketch
End If
end sub

sub codeBag8(part)
Part.InsertSketch
Set swActiveMat = Part.GetActiveSketch()
swSketchMat= createMatFromSWMat(swActiveMat.ModelToSketchXForm)
mSkMat=createMat4x4FromValues(1,0,0,0,1,0,0,0,1,0,0,0)
wMat=mulMat4x4Mat4x4(swSketchMat,mSkMat)
cLn part,wMat,0,0.00292,0,0.0027
cLn part,wMat,0,0.0027,0.000255,0.0027
cLn part,wMat,0.000255,0.0027,0.000255,0.002075
cLn part,wMat,0.000255,0.002075,0,0.002075
cLn part,wMat,0,0.002075,0,0.00158
cArc part,wMat,0,0.00158,2.3431457505076e-05,0.0015234314575051,8e-05,0.0015
cLn part,wMat,8e-05,0.0015,0.00242,0.0015
cArc part,wMat,0.00242,0.0015,0.0024765685424949,0.0015234314575051,0.0025,0.00158
cLn part,wMat,0.0025,0.00158,0.0025,0.002075
cLn part,wMat,0.0025,0.002075,0.002245,0.002075
cLn part,wMat,0.002245,0.002075,0.002245,0.0027
cLn part,wMat,0.002245,0.0027,0.0025,0.0027
cLn part,wMat,0.0025,0.0027,0.0025,0.00292
cArc part,wMat,0.0025,0.00292,0.0024765685424949,0.0029765685424949,0.00242,0.003
cLn part,wMat,0.00242,0.003,8e-05,0.003
cArc part,wMat,8e-05,0.003,2.3431457505076e-05,0.0029765685424949,0,0.00292
cCLn part,wMat,0.00242,0,8e-05,0
if (sw2007api=1) then
Part.SketchManager.InsertSketch True
else
Part.InsertSketch
End If
end sub

sub main
set swApp = Application.SldWorks
code = swApp.RevisionNumber
found = InStr(code, ".")
If (found > 0) Then
  code = Left(code, found-1)
  If (CInt(code) >= 11) Then
    sw2003api=1
  End If
  If (CInt(code) >= 15) Then
    sw2007api=1
  End If
  docVisible=1
  If (CInt(code) >= 18) Then
    docVisible=0
  End If
End If
swApp.SetUserPreferenceToggle 11, FALSE
swApp.SetUserPreferenceToggle 97, FALSE
storePath=BrowseForFolder
If (storePath <> "") Then
   If ((Right(storePath, 1) <> "\") And (Right(storePath, 1) <> "/")) Then
       storePath = storePath + "\"
   End If
   createPart3
End If
end sub
